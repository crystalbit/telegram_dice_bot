import { Telegraf } from 'telegraf';
import { IncomingMessage } from 'telegraf/typings/telegram-types';
import Planner from 'async-delay-planner';
import { botToken } from './config';

const planner = new Planner(500, 60000);

interface Dice {
  emoji: string;
  value: number
}

const bot = new Telegraf(botToken);

const maxValues: {
  [emoji: string]: number;
} = {
  'üéØ': 6,
  'üé∞': 64,
  '‚öΩ': 5,
  'üèÄ': 5,
  'üé≤': 6,
};

bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç—É–ª–∏, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –æ–¥–∏–Ω –∏–∑ —ç–º–æ–¥–∂–∏: üéØüé∞‚öΩüèÄüé≤', {
    // reply_markup: { keyboard: [
    //   [{text: 'üéØ'},]
    // ] }
  })
});

bot.on('message', async (ctx) => {
  const message: IncomingMessage = ctx.update?.message as IncomingMessage;
  if (message?.dice) {
    console.log(message.from?.first_name, message.from?.username, message.dice); // tslint:disable-line no-console
    await new Promise(rs => setTimeout(rs, 5000));
    await planner.hold();
    const dice: Dice = message.dice as Dice;
    const emoji = dice.emoji;
    const max = maxValues[emoji];
    if (!max) {
      ctx.reply('–£! –ù–æ–≤—ã–π –¥–∞–π—Å! –Ø —Ç–∞–∫–æ–π –Ω–µ –∑–Ω–∞—é!');
      return;
    }
    const luck = dice.value / max;
    let text: string[];
    if (dice.value === 1) {
      text = ['–ù–µ—É–¥–∞—á–∞ –í–∞—Å –ø–æ—Å—Ç–∏–≥–ª–∞, —Å—ç—Ä', '–ï–±–∞–Ω—ã–π —Ä–æ—Ç —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ, –±–ª—è–¥—å! –¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, —Å—É–∫–∞!'];
    } else if (luck <= 1/4) {
      text = ['–ú—ã –≤–µ—Ä–∏–º –≤ –í–∞—Å', '–ù–µ —Å–∞–º—ã–π –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –ø–æ—á—Ç–∏))', '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª—É—á—à–µ'];
    } else if (luck <= 1/2) {
      text = ['–®—Ç–æ—à, –ø—Ä–æ–±—É–π—Ç–µ –¥–∞–ª—å—à–µ', '–°—Ä–µ–¥–Ω–µ–Ω—å–∫–æ, –µ—â—ë —Ä–∞–∑?'];
    } else if (luck >= 1) {
      text = ['–£–æ—É! –í—Å–µ –±–æ—Ç—ã —Ö–æ—Ç—è—Ç –æ—Ç –í–∞—Å –¥–µ—Ç–µ–π!', '–£—Ö —Ç—ã, –¥–∂–µ–∫–ø–æ—Ç!', '–õ—É—á—à–∏–π –∏–∑ –ª—É—á—à–∏—Ö, –±—Ä–æ'];
    } else {
      text = ['–í—ã —Ö–æ—Ä–æ—à–æ —Å–µ–±—è –ø–æ–∫–∞–∑–∞–ª–∏, —Å—ç—Ä. –ù–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ', '–ù–µ–º–Ω–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–æ –∏–¥–µ–∞–ª–∞'];
    }
    ctx.reply(text[Math.floor(text.length * Math.random())] + ' (' + dice.value + ' –∏–∑ ' + max + ')', { reply_to_message_id: message.message_id });
  }
});

bot.startPolling();
